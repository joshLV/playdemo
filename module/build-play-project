#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

require 'popen4'

#test_passed_regex = /^~\s+(unit|functional|selenium)\/\w+\.{3}\s+PASSED/
#test_failed_regex = /^~\s+(unit|functional|selenium)\/\w+\.{3}\s+FAILED/
#test_failed_regex2 = /FAILED/
test_passed_regex = /PASSED/
test_failed_regex = /FAILED/
test_error_regex = /ERROR/

play_home="/app/play-1.2.4/"
# play_home = ""
dir = ARGV[0]

if ARGV.size() < 1
  puts "需要指定目标路径！"
  exit(1)
end

puts "run on #{dir}, play:#{play_home}"

require 'pathname'
current_dir = Pathname.new(File.dirname(__FILE__)).parent.realpath

puts current_dir

app_dirs = [
            'website/www',
            'website/home',
            'traders/sales',
            'traders/order',
            'traders/home',
            'traders/sms',
            'traders/admin',
            'cdn/image-server',
            'cdn/assets',
            'operate/admin',
            'operate/business',
            'resale/home'
           ]

# 用于保证不会因为目录不存在而找不到dependency
app_dirs.each do |dd|
  system "mkdir -p #{current_dir}/#{dd}"
end

failed_result = []
passed_test_count = 0
failed_test_count = 0

# Dir.chdir("#{current_dir}/#{dir}")
cmd =<<END
        cd #{current_dir}/#{dir}
        #{play_home}play deps --sync --clearcache
        #{play_home}play auto-test --deps
END
POpen4::popen4(cmd) do |stdout, stderr, stdin|
  stdout.each do |line|
    if line =~ test_passed_regex
      passed_test_count += 1
    end
    if line =~ test_failed_regex or line =~ test_error_regex
      failed_test_count += 1
      failed_result << "#{dir}: #{line}"
    end
    puts "#{line}"
  end
end

printf("=================== %s ====================\n", "Test Report")
printf("| %-30s | PASSED | FAILED |\n", "Project")
printf("----------------------------------------------------\n")
printf("| %-30s | %6d | %6d |\n", dir, passed_test_count, failed_test_count)
printf("----------------------------------------------------\n")

unless failed_result.empty?
  puts "Play Test Failed!"
  failed_result.each {|line| puts "    " + line}
  exit(1)
end


if passed_test_count == 0 or failed_test_count > 0
  puts "Play Build Failed or No Test Found!"
  failed_result.each {|line| puts "    " + line}
  exit(1)
end


# package
#build.time=2012-03-12 12:31:59
#version=V1.0.0build1024
#revision=512
cmd =<<END
  cd #{current_dir}/#{dir}
  find . -name "[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f]*" -exec rm "{}" \;
  #{play_home}play clean
  #{play_home}play deps --forProd --forceCopy --%prod
  rm -f conf/version.conf
  echo "build.time=#{Time.now.strftime("%Y-%m-%d %H:%M:%S")}" >> conf/version.conf
  echo "version=$BUILD_VERSION" >> conf/version.conf
  echo "revision=$SVN_REVISION_1" >> conf/version.conf
END
POpen4::popen4(cmd) do |stdout, stderr, stdin|
  stdout.each do |line|
    puts "#{line}"
  end
end

puts "BUILD SUCCESS!"
